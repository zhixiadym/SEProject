% Date: 2022/10/11
% Author: 陈婉晴，陈傲霜

classdef PairTradingSignal < handle
    properties (Access = public)
        stockUniverse;              % (stockWindTicker, stockShortName)
        propertyList = {'Validity', 'Zscore', 'Dislocation', 'ExpectedReturn','Halflife', 'alpha', 'beta', 'sigma', 'LowerBound', 'UpperBound'};
        signalOutput = zeros(1, 1, 1, 10);  % （time stock1 stock2 property）
        regAlpha1History = []; %加了t的常数项alpha
        regAlphaHistory = [];  %没加时间t的常数项alpha
        regAlpha2History = []; %时间t是否显著，如果显著为1，不显著为0
        regBetaHistoryT = [];  %加了t的股票价格beta
        regBetaHistory = [];   %没加t的股票价格beta
        windowSmooth; %平滑beta时间窗口
        windowReg; %回归时间窗口
        windowDetrend; %去除趋势和季节性的时间窗口，不能小于windowReg
        windowTest; %检验参数平稳性时间窗口
        startDate;  %signal计算开始日期
        endDate;    %signal计算结束日期
        startDateLoc; %startDate在dateList中的位置
        endDateLoc;   %endDate在dateList中的位置
        dateList;     %cell，(date code: num, actual date: char), 所有的交易日信息
        forwardPrices = [];  %所有交易日【不仅是回测期间】所选股票的前复权收盘价
        stockLoc;     %所选行业股票所在位置
        stockNum;     %所选行业股票数量
        
    end
    
    methods (Access = public) 
        function obj = PairTradingSignal(startDate, endDate, windowSmooth, windowReg,stock_sector,windowDetrend, windowTest)
            % stock_sector: 所选板块代码，31为银行业
            obj.windowSmooth = windowSmooth;
            obj.windowReg = windowReg;
            obj.startDate = startDate;
            obj.endDate = endDate;
            obj.windowDetrend = windowDetrend;
            obj.windowTest = windowTest;
            obj.selectStockUniverse(stock_sector);
        end
            
        function obj = selectStockUniverse(obj, stock_sector)
            %获取所选行业股票的基本信息
            marketData = mclasses.staticMarketData.BasicMarketLoader.getInstance();
            generalData = marketData.getAggregatedDataStruct;
            stockSectorFilter = generalData.stock.sectorClassification.levelOne == stock_sector;
            stockLocation = find(sum(stockSectorFilter) > 1);
            obj.stockLoc = stockLocation;
            obj.stockNum = length(stockLocation);
            obj.forwardPrices = generalData.stock.properties.fwd_close(:, stockLocation);
            
            %obj.stockUniverse{i,1} 返回股票i的code
            %obj.stockUniverse{i,2} 返回股票i的中文名
            code=generalData.stock.description.tickers.officialTicker(stockLocation);
            shortname = generalData.stock.description.tickers.shortName(stockLocation);
            obj.stockUniverse = [code,shortname];
            
            %交易日信息
            dateId = generalData.sharedInformation.allDates;
            realDate = generalData.sharedInformation.allDateStr;
            dateId = num2cell(dateId);
            realDate = cellstr(realDate); 
            obj.dateList = [dateId, realDate];
            
            obj.startDateLoc = find(cell2mat(obj.dateList(:,1)) == obj.startDate);
            obj.endDateLoc = find(cell2mat(obj.dateList(:,1)) == obj.endDate);
            
            %检查设置的开始日期是否符合条件
            if obj.startDateLoc <  obj.windowDetrend
                % 如果设置的开始日期太早，向前都留不够去趋势的长度，则程序结束
                disp('开始时间太早了，设置晚一点吧！');
                quit(1);
            end
        end
        
        function forwardAdjPrices = dataCleaning(obj,dateLoc,stock)
            % 去除股票前复权价格时间序列的趋势和季节性
            availablePrice = obj.forwardPrices(dateLoc-obj.windowDetrend+1:dateLoc,stock);
            availablePrice = rmmissing(availablePrice); %去掉空值
            availablePrice = log(availablePrice);
            %去掉季节性因素，参考：https://www.mathworks.com/help/releases/R2021a/econ/moving-average-trend-estimation.html
            wts = [1/60;repmat(1/30,29,1);1/60]; %按月31天进行平滑
            availablePrice = conv(availablePrice,wts,'valid');
            %去掉趋势因素
            DetrendedFwdPrice = detrend(availablePrice);
            forwardAdjPrices = DetrendedFwdPrice;  
        end
        
        function [Y,X] = cointegration(obj,dateLoc,stock1,stock2)
            %协整
            Y = obj.forwardPrices(dateLoc-obj.windowReg+1:dateLoc,stock1);
            X = obj.forwardPrices(dateLoc-obj.windowReg+1:dateLoc,stock2);
            
            %计算Y 和 X 中的空值数量
            YNaNNum = sum(isnan(Y));
            XNaNNum = sum(isnan(X));
            % 统计Y 和 X 中的每种价格的频率
            Y_stat = tabulate(Y);
            X_stat = tabulate(X);
            
            %如果Y或者X中有空值/X和Y中相同价格出现次数超过20%则直接剔除该配对（可能为ST股票）
            if YNaNNum+XNaNNum >= 1 || max(Y_stat(:,3)) > 20|| max(X_stat(:,3)) > 20
                obj.regAlpha1History(stock1,stock2,dateLoc) = NaN;
                obj.regAlpha2History(stock1,stock2,dateLoc) = NaN;
                obj.regBetaHistoryT(stock1,stock2,dateLoc) = NaN;
                obj.regAlphaHistory(stock1,stock2,dateLoc) = NaN;
                obj.regBetaHistory(stock1,stock2,dateLoc) = NaN;
            else
                %去趋势和季节性
                forwardAdjPricesY = obj.dataCleaning(dateLoc,stock1);
                forwardAdjPricesX = obj.dataCleaning(dateLoc,stock2);
                sizeY = size(forwardAdjPricesY);
                sizeX = size(forwardAdjPricesX);
                
                %任一去掉趋势和季节性后的股票时间序列长度小于回归窗口直接剔除配对（可能原因是股票成立时间太短，因此也没必要配对）
                if sizeY(1)<obj.windowReg || sizeX(1)<obj.windowReg
                    obj.regAlpha1History(stock1,stock2,dateLoc) = NaN;
                    obj.regAlpha2History(stock1,stock2,dateLoc) = NaN;
                    obj.regBetaHistoryT(stock1,stock2,dateLoc) = NaN;
                    obj.regAlphaHistory(stock1,stock2,dateLoc) = NaN;
                    obj.regBetaHistory(stock1,stock2,dateLoc) = NaN;
                else
                    Y = forwardAdjPricesY(end+1-obj.windowReg:end);
                    X = forwardAdjPricesX(end+1-obj.windowReg:end);
                    t = ones(obj.windowReg,1);
                    t(:,1)  = 1:1:obj.windowReg; %时间趋势项 yt = alpha1 + alpha2*t + beta*xt + sigma
                    %参考链接：https://www.mathworks.com/help/releases/R2021a/stats/fitlm.html
                    mdl = fitlm([t, X],Y);
                    result = mdl.Coefficients.Variables;

                    obj.regAlpha1History(stock1,stock2,dateLoc) = result(1,1);
                    if result(2,4) < 0.01 %说明时间这个参数是显著的
                        obj.regAlpha2History(stock1,stock2,dateLoc) = 1;
                    else
                        obj.regAlpha2History(stock1,stock2,dateLoc) = 0;
                    end
                    obj.regBetaHistoryT(stock1,stock2,dateLoc) = result(1,3);
                    
                    %计算没加时间项的回归结果，如果通过了ADF test，那么property的计算用这里的回归结果
                    [b,~] = regress(Y,[ones(obj.windowReg,1), X]);
                    obj.regAlphaHistory(stock1,stock2,dateLoc) = b(1);
                    obj.regBetaHistory(stock1,stock2,dateLoc) = b(2);
                end
            end
        end
        
        function obj = initializeHistory(obj)
            %计算startDate之前windowTest-1天的alpha和beta以便用于检验稳定性和平滑处理
            %stock1和stock2分别-1和+1是为了避免和自己配对
            for stock1 = 1:1:obj.stockNum-1 
                for stock2 = stock1+1:1:obj.stockNum
                    for dateLoc = obj.startDateLoc - obj.windowTest + 1:1:obj.startDateLoc - 1
                       [~,~] = obj.cointegration(dateLoc,stock1,stock2);
                    end
                end
            end
        end

        
        function obj = calculateProperty(obj, stock1, stock2, alpha, beta, dateLoc, residual)
            %计算配对股票的properties
            %propertyList = {'Validity', 'Zscore', 'Dislocation', 'ExpectedReturn', 
            %                'Halflife', 'alpha', 'beta', 'sigma', 'LowerBound', 'UpperBound'};
            sigma = std(residual);
            mu = mean(residual);
            obj.signalOutput(dateLoc,stock1,stock2,6) = alpha;
            obj.signalOutput(dateLoc,stock1,stock2,7) = beta;
            obj.signalOutput(dateLoc,stock1,stock2,8) = sigma;
            
            %dislocation: 即residual的最后一个值
            dislocation = residual(end);
            obj.signalOutput(dateLoc,stock1,stock2,3) = dislocation;
            
            %标准化residual
            normaliedResidual = (residual - mu) / sigma;
            
            %z-score:即residual标准化后的最后一个值
            zScore = normaliedResidual(end);
            obj.signalOutput(dateLoc,stock1,stock2,2) = zScore;
            
            %halflife
            [~,~,lambda] = OU_Calibrate_LS(normaliedResidual,1); %天为单位
            halfLife = log(2)/lambda;
            obj.signalOutput(dateLoc,stock1,stock2,5) = halfLife;  
            
            %expeted return
            expectedReturn = (abs(zScore) / 2) / halfLife * 252; %年期望收益
            obj.signalOutput(dateLoc,stock1,stock2,4) = expectedReturn;
         
            %LowerBound 和 UpperBound
            lowerBond = mu - 2*sigma;
            upperBond = mu + 2*sigma;
            obj.signalOutput(dateLoc,stock1,stock2,9) = lowerBond;
            obj.signalOutput(dateLoc,stock1,stock2,10) = upperBond;
        end           
        
        function obj = generateSignal(obj,dateCode)
            %计算startDate和endDate之间每个交易日的signal
            dateLoc = find(cell2mat(obj.dateList(:,1)) == dateCode);
            for stock1 = 1:1:obj.stockNum-1
                for stock2 = stock1+1:1:obj.stockNum
                    [forwardAdjPricesY,forwardAdjPricesX] = obj.cointegration(dateLoc,stock1,stock2);
                    regressionAlpha1History = obj.regAlpha1History(stock1,stock2,dateLoc - obj.windowTest + 1:dateLoc);
                    regressionBetaHistoryT = obj.regBetaHistoryT(stock1,stock2,dateLoc - obj.windowTest + 1:dateLoc);
                    alphaNaNNum = sum(isnan(regressionAlpha1History));
                    betaNaNNum = sum(isnan(regressionBetaHistoryT));
                    if alphaNaNNum+betaNaNNum >= 1
                        obj.signalOutput(dateLoc,stock1,stock2,:) = zeros(10,1);
                    else
                        alpha1Series = zeros(obj.windowTest,1);
                        alpha2Series = zeros(obj.windowTest,1);
                        betaSeriesT = zeros(obj.windowTest,1);
                        alpha1Series(:,1) = regressionAlpha1History; %常数项
                        alpha2Series(:,1) = obj.regAlpha2History(stock1,stock2,dateLoc - obj.windowTest + 1:dateLoc); %时间t的alpha
                        betaSeriesT(:,1) = regressionBetaHistoryT;
                        wilNum = floor(obj.windowTest/2);
                        %平稳性检验
                        [~,h_alpha] = ranksum(alpha1Series(1:wilNum,1),alpha1Series(obj.windowTest-wilNum+1:obj.windowTest,1));
                        [~,h_beta] = ranksum(betaSeriesT(1:wilNum,1),betaSeriesT(obj.windowTest-wilNum+1:obj.windowTest,1));
                        %常数项不平稳/stock的beta不平稳/时间的alpha
                        if (h_alpha == 1) || (h_beta == 1) || sum(alpha2Series) > obj.windowTest/3
                            obj.signalOutput(dateLoc,stock1,stock2,:) = zeros(10,1);
                        else
                            %如果平稳性满足,用不加t的回归参数计算
                            averageAlpha = mean(obj.regAlphaHistory(stock1,stock2,dateLoc - obj.windowSmooth + 1:dateLoc));
                            averageBeta = mean(obj.regBetaHistory(stock1,stock2,dateLoc - obj.windowSmooth + 1:dateLoc));
                            residual = forwardAdjPricesY - averageAlpha - averageBeta*forwardAdjPricesX;
                            [~,p] = adftest(residual);
                            %if residual series is staionary, then calculate and store parameters 
                            if p <= 0.05
                                obj.signalOutput(dateLoc,stock1,stock2,1) = 1;
                                obj.calculateProperty(stock1, stock2, averageAlpha, averageBeta, dateLoc, residual);
                            %if residual series is not stationary, then all the parameters are 0
                            else
                                obj.signalOutput(dateLoc,stock1,stock2,:) = zeros(10,1);
                            end
                        end
                    end
                end
            end
        end
    end   
end
